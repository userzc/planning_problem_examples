package com.veureka;

import com.veureka.domain.DemandPoint;
import com.veureka.domain.Product;
import com.veureka.domain.Costs;
import com.veureka.domain.Supplies;

import org.optaplanner.core.api.score.buildin.hardsoftbigdecimal.HardSoftBigDecimalScoreHolder;
// import org.optaplanner.core.api.score.buildin.simplebigdecimal.SimpleBigDecimalScoreHolder;
// import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

global HardSoftBigDecimalScoreHolder scoreHolder;

// global SimpleBigDecimalScoreHolder scoreHolder;
// global SimpleScoreHolder count1;

rule "countProducts"
    salience -2
    when
	// there is an option of Count, but there's no example located
	// so far
	$originDeposit := Integer()
	$dp := DemandPoint()
	accumulate($p: Product ($dp := toDP, originDeposit == $originDeposit);
		   $s: count($p))
    then
	MathContext context = new MathContext(10, RoundingMode.HALF_EVEN);
	BigDecimal BD_temp = BigDecimal.ZERO;
	// BigDecimal BD_temp = new BigDecimal(0, context);
	System.out.println("Depo " + Integer.toString($originDeposit) + "/ " +
			   $dp + " : " + $s);
	// System.out.println("Using index [" +
	// 		   Integer.toString($originDeposit.intValue()) + "][" +
	// 		   Integer.toString($dp.getId ()) +"]");
	BD_temp = BD_temp.subtract( Costs.g[$originDeposit - 1][$dp.getId()][0] );
	BD_temp = BD_temp.subtract( Costs.g[$originDeposit - 1][$dp.getId()][1].multiply(new BigDecimal($s.intValue())) );
	BD_temp = BD_temp.subtract( Costs.g[$originDeposit - 1][$dp.getId()][2].multiply(new BigDecimal(Math.pow($s.intValue(), 2))) );

	scoreHolder.addSoftConstraintMatch(kcontext, BD_temp);
end

rule "countProductsByDP"
    salience -1
    when
	// there is an option of Count, but there's no example located
	// so far
	$dp := DemandPoint()
	accumulate($p: Product ($dp := toDP);
		   $s: count($p))
    then
	System.out.println("By DP basis; " + $dp + " : " + $s);
	scoreHolder.addHardConstraintMatch(
	    kcontext,
	    new BigDecimal( - Math.abs($dp.getReqRescQuantity() - $s.intValue())));
end
