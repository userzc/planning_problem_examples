package com.veureka;

import com.veureka.domain.DemandPoint;
import com.veureka.domain.Product;
import com.veureka.domain.Costs;
import com.veureka.domain.Supplies;

import org.optaplanner.core.api.score.buildin.simplebigdecimal.SimpleBigDecimalScoreHolder;

global SimpleBigDecimalScoreHolder scoreHolder;

// Count all the products that ship from the same origin to the same
// destiny, ideally it should be possible to bind the origin and
// destination automatically

rule "ShipmentCost"
    when
	// $od and $dp should be binded automatically
	$total_prod: Number() from accumulate($p:Product($od: originDeposit, $dp: toDP),
					      count($np))
	eval($total_prod > 0)
    then
	// This should be a function of some sort
	scoreHolder.addConstraintMatch(
	    kcontext,
	    - Costs[dp.id][originDeposit][0]
	    - Costs[dp.id][originDeposit][1] * $total_prod
	    - Costs[dp.id][originDeposit][2] * Math.pow($total_prod, 2));
end


// Make sure that the DemandPoints have the apropriate number of
// elements shipped to them.

rule "satisfyDemandPoint"
    salience -1
    when
	// I wanted that, given a $dp, all products being shipped
	// there should be counted and store it in $total so to use it in
	// a rule, perhaps there is a way to make this global
	$dp: DemandPoint($reqResource: reqRescQuantity)
	$total: Number() from accumulate(Product(toDP == $dp), count($dp))
    then
	scoreHolder.addConstraintMatch(
	    kcontext, - Math.abs($reqResource - total));
end

// TODO: This part needs to be verified
// Make sure that the Deposits ship all their supplies
rule "emptyDeposit"
    salience -1
    when
	// I wanted that, given a origenDeposit id $i, all products
	// shipped from that deposit should be counted and store it in
	// $total_deposit_shipment to use it in a rule, perhaps there
	// is a way to make this global
	$total_deposit_shipment: Number() from acumulate(
	    $p: Product($i: originDeposit),
	    count($p))
    then
	scoreHolder.addConstraintMatch(
	    kcontext, - Math.abs(Supplies.deposits[$i] - $total_deposit_shipment));
end


// This Rule is just a prototype, it's not meant to be useful at this point
// Use something like this:
rule "checkProduct"
    when
	Product($id: id, $dp: toDp)
    then
	count($id, $dp).add(1);
end